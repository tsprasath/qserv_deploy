# Example for PersistentDisk, PersistentVolume and PersistentVolumeClaim
# dynamically created by volumeClaimTemplate

# See also
# https://cloud.google.com/kubernetes-engine/docs/how-to/persistent-volumes/preexisting-pd

fjammes@clrinfoport09:/opt/gcp$ kubectl get pv pvc-03f6295f-cb1d-11e8-80dc-42010a8002bf -o yaml --export
apiVersion: v1
kind: PersistentVolume
metadata:
  annotations:
    kubernetes.io/createdby: gce-pd-dynamic-provisioner
    pv.kubernetes.io/bound-by-controller: "yes"
    pv.kubernetes.io/provisioned-by: kubernetes.io/gce-pd
  creationTimestamp: null
  labels:
    failure-domain.beta.kubernetes.io/region: us-central1
    failure-domain.beta.kubernetes.io/zone: us-central1-a
  name: pvc-03f6295f-cb1d-11e8-80dc-42010a8002bf
  selfLink: /api/v1/persistentvolumes/pvc-03f6295f-cb1d-11e8-80dc-42010a8002bf
spec:
  accessModes:
  - ReadWriteOnce
  capacity:
    storage: 3Ti
  claimRef:
    apiVersion: v1
    kind: PersistentVolumeClaim
    name: qserv-data-qserv-20
    namespace: default
    resourceVersion: "20267"
    uid: 03f6295f-cb1d-11e8-80dc-42010a8002bf
  gcePersistentDisk:
    fsType: ext4
    pdName: gke-qserv-cluster-121d-pvc-03f6295f-cb1d-11e8-80dc-42010a8002bf
  persistentVolumeReclaimPolicy: Retain
  storageClassName: standard
status: {}
fjammes@clrinfoport09:/opt/gcp$ kubectl get pvc qserv-data-qserv-20 -o yaml --export
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  annotations:
    pv.kubernetes.io/bind-completed: "yes"
    pv.kubernetes.io/bound-by-controller: "yes"
    volume.beta.kubernetes.io/storage-provisioner: kubernetes.io/gce-pd
  creationTimestamp: null
  labels:
    app: qserv
  name: qserv-data-qserv-20
  selfLink: /api/v1/namespaces/default/persistentvolumeclaims/qserv-data-qserv-20
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 3Ti
  storageClassName: standard
  volumeName: pvc-03f6295f-cb1d-11e8-80dc-42010a8002bf
status: {}
